// Initialisation
if (typeof baseUrl === 'undefined') {
    var baseUrl = window.location.origin;
}
const LOG_PREFIX = '[Customiizer][Generate]';
console.log(`${LOG_PREFIX} Script initialis√©`, { baseUrl });
const customTextInput = document.getElementById('custom-text');
const validateButton = document.getElementById('validate-button');
let loadingToggled = false;
let id_image;
let prompt = "";
let settings = "";
let humorIntervalId;
const backgroundGeneration = window.CustomiizerBackgroundGeneration || null;
jQuery(function($) {
        function resetGenerationState() {
                console.log(`${LOG_PREFIX} R√©initialisation de l'√©tat de g√©n√©ration`);
                resetLoadingState();
                id_image = "";
                prompt = "";
                settings = "";

                // Effacer l'image affich√©e pr√©c√©demment
                const currentImage = document.querySelector('#content-images img.centered-image');
                if (currentImage) {
                        currentImage.remove();
		}

		// R√©initialiser la grille des images √† un √©tat d'attente_√ßa devrait √©tre dans le reset
		updateImageGrid();
	}

        // √âcouteur d'√©v√©nements pour DOMContentLoaded

        // Initialisation des √©l√©ments apr√®s le chargement du DOM
        const alertBox = document.getElementById('alert-box');
	const placeholderDiv = document.getElementById('placeholder');
	const validateButton = document.getElementById('validate-button');  // Assure que validateButton est charg√©
	const customTextInput = document.getElementById('custom-text');  // Assure que customTextInput est charg√©
	const savedPromptText = localStorage.getItem('savedPromptText');
	let fullprompt = '';

	// Si du texte a √©t√© sauvegard√©, on le r√©injecte dans l'input et on masque le placeholder
	if (savedPromptText) {
		customTextInput.textContent = savedPromptText;
		placeholderDiv.style.display = 'none';
		localStorage.removeItem('savedPromptText');
	}

        function showAlert(message) {
                alertBox.textContent = message;
                alertBox.style.display = 'block';
        }

        // Gestion des √©v√©nements du suivi en arri√®re-plan
        if (backgroundGeneration) {
                backgroundGeneration.subscribe(handleBackgroundEvent);
                const existingJob = backgroundGeneration.getJob();
                if (existingJob) {
                        syncUIWithJob(existingJob);
                }
        }

        // √âcouteur d'√©v√©nements pour le bouton de validation
        validateButton.addEventListener('click', async function(e) {
                e.preventDefault();

		resetGenerationState();
		resetLoadingState();

		settings = ' --ar ' + selectedRatio;
		prompt = customTextInput.textContent.trim();  // R√©cup√®re le texte de l'input
		console.log(`${LOG_PREFIX} Demande de g√©n√©ration re√ßue`, {
			prompt,
			settings,
			ratio: selectedRatio,
			userId: currentUser.ID,
		});
		if (!prompt) {
			showAlert('Veuillez entrer du texte avant de g√©n√©rer des images.');
			return;
		}

		if (!settings) {
			showAlert("Veuillez choisir une taille d'image avant de g√©n√©rer des images.");
			return;
		}

		if (!currentUser.ID || currentUser.ID === 0) {
			localStorage.setItem('savedPromptText', prompt);  // Enregistre le texte dans localStorage
			showAlert("Vous devez √™tre connect√© pour g√©n√©rer des images.");
			openLoginModal();
			return;
		}

		const creditsEl = document.getElementById('userCredits');
		const credits = creditsEl ? parseInt(creditsEl.textContent || "0", 10) : 0;

		if (!credits || credits <= 0) {
			showAlert("Vous n'avez pas assez de cr√©dits pour g√©n√©rer des images.");
			return;
		}


		// Cache l'alerte si tout est OK
		alertBox.style.display = 'none';

		// Combine prompt et settings
		fullprompt = prompt + settings;

		// D√©sactive le bouton pour √©viter les doubles clics
		validateButton.disabled = true;
		animateLoadingWithHumor();
		updateImageGrid();
                toggleLoading(true);
		//updateLoading(0); // Assure l'affichage initial de la barre de chargement


		try {
			console.log(`${LOG_PREFIX} Envoi de la requ√™te de g√©n√©ration √† l'API`, {
				endpoint: '/wp-content/themes/customiizer/includes/proxy/generate_image.php',
				webhook: baseUrl + '/wp-content/themes/customiizer/includes/webhook/imagine.php',
			});
			const response = await fetch('/wp-content/themes/customiizer/includes/proxy/generate_image.php', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify({
					prompt: fullprompt,
					webhook_url: baseUrl + '/wp-content/themes/customiizer/includes/webhook/imagine.php',
					webhook_type: 'progress',
					is_disable_prefilter: false
				})
			});

			if (!response.ok) throw new Error("√âchec de la r√©cup√©ration du statut de l'image");

			const data = await response.json();
			console.log(`${LOG_PREFIX} R√©ponse re√ßue du proxy de g√©n√©ration`, data);

                        if (data.status === 'success') {
                                id_image = data.data.hash;
                                console.log(`${LOG_PREFIX} G√©n√©ration accept√©e`, { hash: id_image });

                                if (backgroundGeneration) {
                                        backgroundGeneration.startTracking({
                                                hash: id_image,
                                                prompt,
                                                settings,
                                                ratio: selectedRatio,
                                                userId: currentUser.ID,
                                                displayName: currentUser.display_name || '',
                                                userLogo: currentUser.user_logo || ''
                                        });
                                } else {
                                        console.warn(`${LOG_PREFIX} Module de suivi en arri√®re-plan indisponible`);
                                }

				// üí≥ D√©cr√©mentation des cr√©dits si succ√®s
				const creditsEl = document.getElementById('userCredits');
				if (creditsEl) {
					let currentCredits = parseInt(creditsEl.textContent || "0", 10);
					if (!isNaN(currentCredits) && currentCredits > 0) {
						currentCredits -= 1;
						creditsEl.textContent = currentCredits;
						console.log(`${LOG_PREFIX} Cr√©dit consomm√© apr√®s g√©n√©ration`, { creditsRestants: currentCredits });

						// üß† Cache sessionStorage √† jour
						const cached = sessionStorage.getItem('USER_ESSENTIALS');
						if (cached) {
							let cacheData = JSON.parse(cached);
							if (cacheData.user_id === currentUser.ID) {
								cacheData.image_credits = currentCredits;
								sessionStorage.setItem('USER_ESSENTIALS', JSON.stringify(cacheData));
							}
						}

						// üîÑ Synchro serveur
						await updateCreditsInDB(currentUser.ID);
					}
				}

				lastUpdateTime = Date.now();
				lastProgress = 15;

			} else {
				console.error("‚ùå Erreur dans les donn√©es re√ßues :", data.message);
				console.log(`${LOG_PREFIX} Erreur signal√©e par l'API de g√©n√©ration`, data);
				showAlert("Une erreur est survenue pendant la g√©n√©ration. Veuillez r√©essayer.");
			}

		} catch (error) {
			console.error("‚ùå Erreur de la requ√™te POST:", error);
			console.log(`${LOG_PREFIX} Erreur lors de l'appel API`, { error });
			showAlert("Une erreur r√©seau est survenue. V√©rifiez votre connexion ou r√©essayez plus tard.");
			validateButton.disabled = false;
		}


		// Affiche une alerte
		function showAlert(message) {
			alertBox.textContent = message;
			alertBox.style.display = 'block';
		}
	});

        async function updateCreditsInDB(userId) {
                try {
                        const response = await fetch(ajaxurl, {
                                method: 'POST',
                                headers: {
                                        'Content-Type': 'application/x-www-form-urlencoded',
                                },
                                body: `action=decrement_credits&user_id=${encodeURIComponent(userId)}`
                        });
                        if (!response.ok) throw new Error('√âchec de d√©cr√©mentation c√¥t√© serveur');
                        const data = await response.json();                        if (data.missions_completed && data.missions_completed.length) {
                                // Notifications are handled elsewhere
                        }
                } catch (error) {
                        console.error('‚ùå Erreur c√¥t√© serveur pour d√©cr√©menter les cr√©dits :', error);
                }
	}

	// Fonction pour afficher et sauvegarder les images
        // Fonction pour mettre √† jour une image dans la grille
        function updateImageInGrid(imageUrl, index, metadata = {}) {
                const grid = document.getElementById('image-grid');
                const imageContainers = grid.querySelectorAll('.image-container');
                if (imageContainers && imageContainers.length > index) {
                        const imgElement = imageContainers[index].querySelector('img');
                        if (imgElement) {
                                imgElement.src = imageUrl;

                                // ‚úÖ Ajout des bons data-* pour pr√©visualisation correcte
                                const displayName = metadata.displayName || currentUser.display_name || '';
                                const userLogo = metadata.userLogo || currentUser.user_logo || '';
                                const userId = metadata.userId || currentUser.ID || '';
                                const format = metadata.format || selectedRatio || '';
                                const promptSource = metadata.prompt !== undefined ? metadata.prompt : prompt;
                                const promptTextUpdate = typeof promptSource === 'object'
                                    ? (promptSource.text || promptSource.prompt || JSON.stringify(promptSource))
                                    : (promptSource || '');
                                imgElement.setAttribute('data-display_name', displayName);
                                imgElement.setAttribute('data-user-logo', userLogo);
                                imgElement.setAttribute('data-user-id', userId);
                                imgElement.setAttribute('data-format-image', format);
                                imgElement.setAttribute('data-prompt', promptTextUpdate);
                                console.log(`${LOG_PREFIX} Image de la grille mise √† jour`, {
                                        index,
                                        imageUrl,
                                        prompt: promptTextUpdate,
                                });
                        }
                }
        }

        function showIntermediateImage(imageUrl, jobData) {
                const $container = $('#content-images');
                const $existing = $container.find('img.centered-image');

                if ($existing.length > 0) {
                        $existing.each(function() {
                                jQuery.removeData(this);
                        });
                        $existing.remove();
                }

                const promptSource = jobData && jobData.prompt !== undefined ? jobData.prompt : prompt;
                const promptText = typeof promptSource === 'object'
                        ? (promptSource.text || promptSource.prompt || JSON.stringify(promptSource))
                        : (promptSource || '');

                if (imageUrl) {
                        const displayName = (jobData && jobData.displayName) || currentUser.display_name || '';
                        const userLogo = (jobData && jobData.userLogo) || currentUser.user_logo || '';
                        const userId = (jobData && jobData.userId) || currentUser.ID || '';
                        const format = (jobData && jobData.ratio) || selectedRatio || '';

                        const $newImage = $('<img>')
                                .attr('src', imageUrl)
                                .attr('alt', 'Image g√©n√©r√©e')
                                .attr('data-display_name', displayName)
                                .attr('data-user-logo', userLogo)
                                .attr('data-user-id', userId)
                                .attr('data-format-image', format)
                                .attr('data-prompt', promptText)
                                .addClass('centered-image preview-enlarge');

                        $container.append($newImage);
                } else {
                        $container.append(`
                                <img src="/wp-content/themes/customiizer/images/customiizerSiteImages/attente.png"
                                        alt="En cours..."
                                        class="centered-image">
                        `);
                }

                if (typeof adjustImageHeight === 'function') {
                        adjustImageHeight();
                }
                $('#image-grid').hide();
        }

        function handleImagesSaved(savedImages, jobData) {
                if (!Array.isArray(savedImages) || savedImages.length === 0) {
                        return;
                }

                const metadata = {
                        displayName: jobData && jobData.displayName ? jobData.displayName : currentUser.display_name || '',
                        userLogo: jobData && jobData.userLogo ? jobData.userLogo : currentUser.user_logo || '',
                        userId: jobData && jobData.userId ? jobData.userId : currentUser.ID || '',
                        format: jobData && jobData.ratio ? jobData.ratio : selectedRatio || '',
                        prompt: jobData && jobData.prompt !== undefined ? jobData.prompt : prompt
                };

                savedImages.forEach(result => {
                        if (result && result.imageUrl !== undefined && typeof result.index === 'number') {
                                updateImageInGrid(result.imageUrl, result.index, metadata);
                        }
                });

                const currentImage = $('#content-images img.centered-image');
                if (currentImage.length > 0) {
                        currentImage.hide();
                }

                const grid = document.getElementById('image-grid');
                if (grid) {
                        grid.style.display = 'grid';
                }

                toggleLoading(false);
                clearHumorInterval();
        }

        function clearHumorInterval() {
                if (humorIntervalId) {
                        clearInterval(humorIntervalId);
                        humorIntervalId = null;
                }
        }

        function syncUIWithJob(jobData) {
                if (!jobData) {
                        return;
                }

                if (jobData.status !== 'completed') {
                        validateButton.disabled = true;
                        toggleLoading(true);
                        if (!humorIntervalId) {
                                animateLoadingWithHumor();
                        }
                }

                if (typeof jobData.progress === 'number') {
                        updateLoading(jobData.progress);
                }

                if (jobData.displayedUrl) {
                        showIntermediateImage(jobData.displayedUrl, jobData);
                }

                if (Array.isArray(jobData.images) && jobData.images.length) {
                        handleImagesSaved(jobData.images, jobData);
                        validateButton.disabled = false;
                }

                if (jobData.stage === 'error') {
                        showAlert("Une erreur est survenue pendant la g√©n√©ration. Veuillez r√©essayer.");
                        toggleLoading(false);
                        validateButton.disabled = false;
                }
        }

        function handleBackgroundEvent(event) {
                const jobData = event.job || null;
                const payload = event.payload || {};

                switch (event.type) {
                        case 'job-started':
                                validateButton.disabled = true;
                                animateLoadingWithHumor();
                                updateImageGrid();
                                toggleLoading(true);
                                break;
                        case 'job-progress':
                                if (payload && payload.statusData && typeof payload.statusData.progress === 'number') {
                                        updateLoading(payload.statusData.progress);
                                } else if (jobData && typeof jobData.progress === 'number') {
                                        updateLoading(jobData.progress);
                                }

                                if (payload && payload.displayedUrl) {
                                        showIntermediateImage(payload.displayedUrl, jobData);
                                }
                                break;
                        case 'job-stage':
                                if (jobData && jobData.stage === 'upscaling') {
                                        animateCompletionWithHumor();
                                }
                                break;
                        case 'job-images-saved':
                                handleImagesSaved(payload.images || [], jobData);
                                validateButton.disabled = false;
                                break;
                        case 'job-completed':
                                handleImagesSaved((payload && payload.images) || (jobData && jobData.images) || [], jobData);
                                validateButton.disabled = false;
                                break;
                        case 'job-error':
                                showAlert(payload && payload.message ? payload.message : "Une erreur est survenue pendant la g√©n√©ration. Veuillez r√©essayer.");
                                toggleLoading(false);
                                validateButton.disabled = false;
                                clearHumorInterval();
                                break;
                        case 'job-restored':
                                syncUIWithJob(jobData);
                                break;
                        case 'job-cleared':
                                toggleLoading(false);
                                validateButton.disabled = false;
                                clearHumorInterval();
                                break;
                        default:
                                break;
                }
        }


	// Fonction pour sauvegarder l'URL de l'image
        // Autres fonctions utilitaires
	function displaySmallImages(images) {
		var imageContainer = document.getElementById('image-small');
		if (!imageContainer) {
			console.error("Le conteneur des images de produits est introuvable.");
			return;
		}

		imageContainer.innerHTML = '';

		if (images.length > 0) {
			var imageUrl = images[0];

			var img = document.createElement('img');
			img.src = imageUrl;
			img.alt = 'Image du produit';
			img.classList.add('small-image'); 

			imageContainer.appendChild(img);
		} else {
			console.error("Aucune image disponible pour ce produit.");
		}
	}

	function updateImageGrid() {
		const gridImages = document.querySelectorAll('.image-grid img');
		gridImages.forEach(image => {
			image.src = '/wp-content/themes/customiizer/images/customiizerSiteImages/attente.png';
			image.alt = 'image d\'attente';
		});
	}

	function resetLoadingState() {
		const loadingBar = document.getElementById('loading-bar');
		const loadingText = document.getElementById('loading-text');
		if (loadingBar) {
			loadingBar.style.width = '0%';
		}
		if (loadingText) {
			loadingText.textContent = 'Notre IA est en pleine m√©ditation cr√©ative...';
		}
		loadingToggled = false;
	}

        function toggleLoading(force) {
                const loadingContainer = document.querySelector('.loading-container');
                if (!loadingContainer) {
                        return;
                }

                if (typeof force === 'boolean') {
                        if (force) {
                                loadingContainer.classList.remove('hide');
                                loadingToggled = true;
                        } else {
                                loadingContainer.classList.add('hide');
                                loadingToggled = false;
                        }
                        return;
                }

                loadingContainer.classList.toggle('hide');
                loadingToggled = !loadingContainer.classList.contains('hide');
        }

	function animateLoadingWithHumor() {
		const humorousPhrases = [
			"L'IA prend son caf√©...", 
			"Les pixels se mettent en place... doucement.", 
			"Les algorithmes dansent la valse des neurones...", 
			"Consultation du manuel 'Comment cr√©er une ≈ìuvre d'art'...", 
			"Pr√©paration de l'image parfaite (ou presque)...", 
			"Les maths font leur magie en coulisse...", 
			"G√©n√©ration de quelque chose de vraiment cool...", 
			"Application de la sauce IA secr√®te...", 
			"V√©rification des probabilit√©s de chef-d'≈ìuvre...", 
			"En train de demander l'aide d'un supercalculateur..." 
		];
		let currentIndex = 0;

		// V√©rifiez si un intervalle humoristique est d√©j√† actif, le cas √©ch√©ant, le nettoyer
		if (humorIntervalId) {
			clearInterval(humorIntervalId);
		}

		// D√©marre l'animation des phrases humoristiques
		humorIntervalId = setInterval(() => {
			if (currentIndex >= humorousPhrases.length) {
				currentIndex = 0; // Recommence depuis le d√©but si toutes les phrases ont √©t√© affich√©es
			}
			updateLoadingText(humorousPhrases[currentIndex]);
			currentIndex++;
		}, 2500);
	}

	function animateCompletionWithHumor() {
		const completionPhrases = [
			"L'IA met les derniers coups de pinceau ...",
			"Raffinement final... presque pr√™t √† vous √©pater !",
			"Encore un peu de magie... L'image est en cours de finition...",
			"L'IA ajuste les derniers d√©tails pour la perfection...",
			"Finalisation en cours... C'est bient√¥t pr√™t !",
			"Derniers r√©glages... L'image arrive dans un instant...",
			"Votre image est en train de recevoir sa touche finale...",
			"Optimisation des pixels pour un rendu optimal...",
			"L'IA prend un pas de recul pour admirer... c'est presque pr√™t.",
			"Finalisation... Pr√©parez-vous √† voir le r√©sultat !"
		];
		let currentIndex = 0;

		// Afficher imm√©diatement la premi√®re phrase
		updateLoadingText(completionPhrases[currentIndex]);
		currentIndex++;

		// D√©marre l'animation des phrases humoristiques pour la fin de g√©n√©ration
		humorIntervalId = setInterval(() => {
			if (currentIndex >= completionPhrases.length) {
				currentIndex = 0; // Recommence depuis le d√©but si toutes les phrases ont √©t√© affich√©es
			}
			updateLoadingText(completionPhrases[currentIndex]);
			currentIndex++;
		}, 2500);
	}

	function updateLoading(percent) {
		const loadingBar = document.getElementById('loading-bar');
		const loadingText = document.getElementById('loading-text');

		// V√©rifie que les √©l√©ments existent
		if (!loadingBar || !loadingText) {
			console.error("Erreur : La barre de chargement ou le texte est introuvable.");
			return; // Arr√™te l'ex√©cution de la fonction si un √©l√©ment est manquant
		}

		// Met √† jour la largeur de la barre de chargement en fonction du pourcentage
		loadingBar.style.width = `${percent}%`;

		// Met √† jour le texte du pourcentage
		loadingText.textContent = percent > 0 ? `Chargement : ${percent}%` : '';

		// Arr√™te l'animation humoristique lorsque les pourcentages r√©els sont disponibles
		if (percent > 0 && humorIntervalId) {
			clearInterval(humorIntervalId);
			humorIntervalId = null; // Assurez-vous qu'il est r√©initialis√©
		}

		// Quand le chargement atteint 100 %, commencez les phrases humoristiques de fin de g√©n√©ration
		if (percent === 100) {
			animateCompletionWithHumor();
		}
	}

	function updateLoadingText(text) {
		const loadingText = document.getElementById('loading-text');

		// V√©rifie que l'√©l√©ment existe
		if (!loadingText) {
			console.error("Erreur : Le texte de chargement est introuvable.");
			return;
		}

		// Met √† jour le texte du chargement avec une phrase humoristique
		loadingText.textContent = text;
	}

        async function updateCredits() {
                try {
                        const response = await fetch(ajaxurl, {
                                method: 'POST',
                                headers: {
                                        'Content-Type': 'application/x-www-form-urlencoded',
                                },
                                body: `action=decrement_credits&user_id=${encodeURIComponent(currentUser.ID)}`
                        });
                        if (!response.ok) {
                                throw new Error('√âchec de la mise √† jour des cr√©dits dans la base de donn√©es.');
                        }
                        const data = await response.json();
                        if (data.missions_completed && data.missions_completed.length) {
                                // Notifications are handled elsewhere
                        }
                } catch (error) {
                        console.error('Erreur de d√©cr√©mentation des cr√©dits:', error);
                }
	}
});