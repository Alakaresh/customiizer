<?php

// Compression level for PNG mockups generated by convert_webp_to_png_server().
// 0 = no compression, 9 = maximum compression.
// Higher values produce smaller files but require more CPU time.
if (!defined('PNG_COMPRESSION_LEVEL')) {
    define('PNG_COMPRESSION_LEVEL', 8);
}

// Google OAuth client ID for login. Set this in wp-config.php to override.
if (!defined('GOOGLE_CLIENT_ID')) {
    define('GOOGLE_CLIENT_ID', '');
}

// Maximum width or height for PNG mockups generated for Printful.
// Images larger than this size are downscaled before saving.
if (!defined('MOCKUP_MAX_DIMENSION')) {
    define('MOCKUP_MAX_DIMENSION', 1500);
}

// Hosts allowed for remote image downloads performed by convert_webp_to_png_server().
// Only images from these domains will be retrieved.
if (!defined('ALLOWED_IMAGE_HOSTS')) {
    $hosts = ['customiizer.blob.core.windows.net'];

    $host = null;
    if (function_exists('site_url')) {
        $site_url = site_url();
        if ($site_url) {
            $host = parse_url($site_url, PHP_URL_HOST);
        }
    }

    if (!$host) {
        $server_host = $_SERVER['HTTP_HOST'] ?? $_SERVER['SERVER_NAME'] ?? null;
        if ($server_host) {
            // Remove the port if present (e.g. example.com:8443).
            $host = preg_replace('/:\d+$/', '', $server_host);
        }
    }

    if ($host && !in_array($host, $hosts, true)) {
        $hosts[] = $host;
    }

    define('ALLOWED_IMAGE_HOSTS', $hosts);
}

// Timeout for remote image downloads in seconds.
if (!defined('REMOTE_IMAGE_TIMEOUT')) {
    define('REMOTE_IMAGE_TIMEOUT', 10);
}

// Maximum bytes allowed for a downloaded image (5 MB by default).
if (!defined('REMOTE_IMAGE_MAX_BYTES')) {
    define('REMOTE_IMAGE_MAX_BYTES', 5 * 1024 * 1024);
}

/**
 * Retrieve the worker socket configuration from WordPress options or constants.
 *
 * @return array{enabled:bool,url:string,token:string}
 */
function customiizer_get_worker_socket_settings() {
    static $cached = null;

    if ($cached !== null) {
        return $cached;
    }

    $defaults = [
        'enabled' => false,
        'url' => '',
        'token' => '',
    ];

    $normalize_bool = static function ($value, $fallback = false) {
        if ($value === null) {
            return $fallback;
        }

        if (is_bool($value)) {
            return $value;
        }

        if (is_numeric($value)) {
            return (int) $value === 1;
        }

        if (is_string($value)) {
            $lower = strtolower(trim($value));
            return in_array($lower, ['1', 'true', 'yes', 'on'], true);
        }

        return $fallback;
    };

    $normalize_string = static function ($value) {
        if (is_string($value)) {
            return trim($value);
        }

        if (is_scalar($value)) {
            return trim((string) $value);
        }

        return '';
    };

    $config = $defaults;

    if (function_exists('get_option')) {
        $option_candidates = [
            get_option('customiizer_worker_socket_settings'),
            get_option('customiizer_worker_socket'),
        ];

        foreach ($option_candidates as $candidate) {
            if (is_array($candidate)) {
                $config['enabled'] = $normalize_bool(
                    $candidate['enabled'] ?? $candidate['active'] ?? $candidate['is_enabled'] ?? $config['enabled'],
                    $config['enabled']
                );
                $config['url'] = $normalize_string($candidate['url'] ?? $candidate['endpoint'] ?? $config['url']);
                $config['token'] = $normalize_string($candidate['token'] ?? $candidate['secret'] ?? $config['token']);
            }
        }

        $single_option_map = [
            'enabled' => [
                'customiizer_worker_socket_enabled',
                'customiizer_worker_socket_active',
            ],
            'url' => [
                'customiizer_worker_socket_url',
                'customiizer_worker_url',
            ],
            'token' => [
                'customiizer_worker_socket_token',
                'customiizer_worker_token',
            ],
        ];

        foreach ($single_option_map as $key => $option_names) {
            foreach ($option_names as $option_name) {
                $value = get_option($option_name);
                if ($value === false || $value === null || $value === '') {
                    continue;
                }

                if ($key === 'enabled') {
                    $config['enabled'] = $normalize_bool($value, $config['enabled']);
                } elseif ($key === 'url') {
                    $config['url'] = $normalize_string($value);
                } elseif ($key === 'token') {
                    $config['token'] = $normalize_string($value);
                }
                break;
            }
        }
    }

    $constant_map = [
        'enabled' => [
            'CUSTOMIIZER_WORKER_SOCKET_ENABLED',
            'CUSTOMIIZER_WORKER_SOCKET_ACTIVE',
            'CUSTOMIIZER_WORKER_ENABLED',
        ],
        'url' => [
            'CUSTOMIIZER_WORKER_SOCKET_URL',
            'CUSTOMIIZER_WORKER_URL',
        ],
        'token' => [
            'CUSTOMIIZER_WORKER_SOCKET_TOKEN',
            'CUSTOMIIZER_WORKER_TOKEN',
        ],
    ];

    foreach ($constant_map as $key => $constants) {
        foreach ($constants as $constant) {
            if (!defined($constant)) {
                continue;
            }

            $value = constant($constant);
            if ($key === 'enabled') {
                $config['enabled'] = $normalize_bool($value, $config['enabled']);
            } elseif ($key === 'url') {
                $config['url'] = $normalize_string($value);
            } elseif ($key === 'token') {
                $config['token'] = $normalize_string($value);
            }
            break;
        }
    }

    if (function_exists('esc_url_raw') && $config['url']) {
        $config['url'] = esc_url_raw($config['url']);
    }

    $cached = [
        'enabled' => (bool) $config['enabled'],
        'url' => $config['url'],
        'token' => $config['token'],
    ];

    return $cached;
}

function customiizer_log($context, $message = '') {
    $log_file = __DIR__ . '/customiizer.log';
    $date = date('Y-m-d H:i:s');

    // Si un seul argument est donné, on le considère comme le message complet
    if ($message === '') {
        $line = "[$date] $context\n";
    } else {
        $line = "[$date] [$context] $message\n";
    }

    file_put_contents($log_file, $line, FILE_APPEND);
}

/**
 * Get the frontend version defined in version.json for cache busting.
 *
 * @return string|null The version string or null if not found.
 */
function customiizer_frontend_version() {
    static $frontend_version = null;

    if ($frontend_version !== null) {
        return $frontend_version;
    }

    $path = get_stylesheet_directory() . '/version.json';
    if (file_exists($path)) {
        $data = json_decode(file_get_contents($path), true);
        if (isset($data['frontend'])) {
            $frontend_version = $data['frontend'];
            return $frontend_version;
        }
    }

    return $frontend_version;
}

/**
 * Get the Early Access version defined in version.json.
 *
 * @return string|null The version string or null if not found.
 */
function customiizer_early_access_version() {
    static $early_access_version = null;

    if ($early_access_version !== null) {
        return $early_access_version;
    }

    $path = get_stylesheet_directory() . '/version.json';
    if (file_exists($path)) {
        $data = json_decode(file_get_contents($path), true);
        if (isset($data['early_access'])) {
            $early_access_version = $data['early_access'];
            return $early_access_version;
        }
    }

    return $early_access_version;
}

/**
 * Detect if we are running on the production environment.
 *
 * Uses wp_get_environment_type() when available, otherwise falls back to
 * checking the site URL for the customiizer.com domain.
 *
 * @return bool True when production environment detected.
 */
function customiizer_is_production() {
    if (function_exists('wp_get_environment_type')) {
        if (wp_get_environment_type() === 'production') {
            return true;
        }
    }

    return strpos(home_url(), 'customiizer.com') !== false;
}
/**
 * Get the user's profile image URL, caching the remote avatar locally.
 *
 * If the user uploaded a custom image, that image is returned. Otherwise the
 * avatar from get_avatar_url() is downloaded once and stored in the user's
 * wp-sauvegarde directory for faster subsequent access.
 *
 * @param int $user_id
 * @return string URL to the cached profile image or empty string on failure.
 */
function customiizer_get_profile_image_url($user_id) {
    $base_url = get_site_url();
    $relative_dir = "/wp-sauvegarde/user/$user_id";
    $full_dir = $_SERVER['DOCUMENT_ROOT'] . $relative_dir;

    // Custom uploaded image takes precedence
    $custom_path = "$full_dir/user_logo.png";
    if (file_exists($custom_path)) {
        return $base_url . "$relative_dir/user_logo.png";
    }

    $cached_path = "$full_dir/avatar_cache.jpg";
    if (file_exists($cached_path)) {
        return $base_url . "$relative_dir/avatar_cache.jpg";
    }

    $avatar_url = get_avatar_url($user_id);
    if (!$avatar_url) {
        return '';
    }

    if (!file_exists($full_dir)) {
        wp_mkdir_p($full_dir);
    }

    $response = wp_remote_get($avatar_url, ['timeout' => 5]);
    if (!is_wp_error($response) && wp_remote_retrieve_response_code($response) === 200) {
        file_put_contents($cached_path, wp_remote_retrieve_body($response));
        return $base_url . "$relative_dir/avatar_cache.jpg";
    }

    return $avatar_url;
}


/**
 * Round a price to the next psychological value ending in .99.
 * For example, 12.02 => 12.99.
 */
function customiizer_psychological_price($price, $tax_rate = 0) {
    // If a tax rate is provided, round the price including tax to the
    // next value ending in .99 and then convert back to HT.
    if ($tax_rate > 0) {
        $ttc = $price * (1 + $tax_rate);
        $rounded = floor($ttc) + 0.99;
        if ($rounded < $ttc) {
            $rounded = floor($ttc) + 1 + 0.99;
        }
        return round($rounded / (1 + $tax_rate), 2);
    }

    // Default behaviour: round the HT price directly.
    $rounded = floor($price) + 0.99;
    if ($rounded < $price) {
        $rounded = floor($price) + 1 + 0.99;
    }
    return round($rounded, 2);
}
